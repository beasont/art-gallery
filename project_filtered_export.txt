file: .gitattributes
contents:
/mvnw text eol=lf
*.cmd text eol=crlf



file: .gitignore
contents:
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/



file: maven-wrapper.properties
contents:
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip



file: HELP.md
contents:
# Read Me First
The following was discovered as part of building this project:

* The original package name 'com.artgallery.art-gallery' is invalid and this project uses 'com.artgallery.art_gallery' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.0/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.0/maven-plugin/build-image.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.4.0/reference/web/servlet.html)
* [Spring Data JPA](https://docs.spring.io/spring-boot/3.4.0/reference/data/sql.html#data.sql.jpa-and-spring-data)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/3.4.0/reference/using/devtools.html)
* [Spring Security](https://docs.spring.io/spring-boot/3.4.0/reference/web/spring-security.html)
* [Validation](https://docs.spring.io/spring-boot/3.4.0/reference/io/validation.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)
* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Securing a Web Application](https://spring.io/guides/gs/securing-web/)
* [Spring Boot and OAuth2](https://spring.io/guides/tutorials/spring-boot-oauth2/)
* [Authenticating a User with LDAP](https://spring.io/guides/gs/authenticating-ldap/)
* [Validation](https://spring.io/guides/gs/validating-form-input/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.




file: mvnw
contents:
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"



file: mvnw.cmd
contents:
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"



file: pom.xml
contents:
<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <relativePath/>
    </parent>

    <groupId>com.artgallery</groupId>
    <artifactId>art-gallery</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>art-gallery</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>22</java.version>
        <!-- Lombok version explicitly set here -->
        <lombok.version>1.18.30</lombok.version>
    </properties>

    <dependencies>

        <!-- Spring Actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Spring Data JPA -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Spring Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Devtools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- H2 Database -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok with version -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Security Test -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>22</source>
                    <target>22</target>
                    <annotationProcessorPaths>
                        <!-- Lombok must have a version here as well -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>



file: ArtGalleryApplication.java
contents:
package com.artgallery.art_gallery;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ArtGalleryApplication {

	public static void main(String[] args) {
		SpringApplication.run(ArtGalleryApplication.class, args);
	}

}



file: RestTemplateConfig.java
contents:
package com.artgallery.art_gallery.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}



file: webConfig.java
contents:
package com.artgallery.art_gallery.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class webConfig {

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(@SuppressWarnings("null") CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:4200")
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                        .allowedHeaders("*");
            }
        };
    }
}



file: ArtController.java
contents:
package com.artgallery.art_gallery.controller;

import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api")
public class ArtController {

    // We'll store the in-memory list as static so other classes can reference
    private static final List<Map<String, String>> IN_MEMORY_ART_LIST = List.of(
        Map.of("id", "1",  "title", "The Fall of the Rebel Angels", "artist", "Gustave Doré",
               "year", "1866",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/0/04/MILTON_%281695%29_p016_PL_1.jpg"),
        Map.of("id", "2",  "title", "Paradise Lost", "artist", "Gustave Doré",
               "year", "1866",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/9/9d/Paradise_Lost_12.jpg"),
        Map.of("id", "3",  "title", "The Son of Man", "artist", "René Magritte",
               "year", "1964",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://files.catbox.moe/208oob.JPG"),
        Map.of("id", "4",  "title", "The Lovers", "artist", "René Magritte",
               "year", "1928",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://miro.medium.com/v2/resize:fit:900/1*qKcjSr2kzRvXilsLqNrV8Q.jpeg"),
        Map.of("id", "5",  "title", "Le Pandemonium", "artist", "John Martin",
               "year", "1841",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/0/08/John_Martin_Le_Pandemonium_Louvre.JPG"),
        Map.of("id", "6",  "title", "The Great Day of His Wrath", "artist", "John Martin",
               "year", "1853",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/8/8d/MARTIN_John_Great_Day_of_His_Wrath.jpg"),
        Map.of("id", "7",  "title", "Pilgrimage", "artist", "Alan Lee",
               "year", "1990",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://arthur.io/img/art/jpg/00017344fc72b64fb/alan-lee/pilgrimage/large/alan-lee--pilgrimage.jpg"),
        Map.of("id", "8",  "title", "The Trolls See the", "artist", "Alan Lee",
               "year", "1985",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://i.pinimg.com/originals/8e/19/e1/8e19e1a70d8ee5f5b4ebad812e2077d2.jpg"),
        Map.of("id", "9",  "title", "The Scream", "artist", "Edvard Munch",
               "year", "1893",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Edvard_Munch%2C_1893%2C_The_Scream%2C_oil%2C_tempera_and_pastel_on_cardboard%2C_91_x_73_cm%2C_National_Gallery_of_Norway.jpg/800px-Edvard_Munch%2C_1893%2C_The_Scream%2C_oil%2C_tempera_and_pastel_on_cardboard%2C_91_x_73_cm%2C_National_Gallery_of_Norway.jpg"),
        Map.of("id", "10", "title", "The Sick Child", "artist", "Edvard Munch",
               "year", "1885",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://media.tate.org.uk/art/images/work/N/N05/N05035_10.jpg"),
        Map.of("id", "11", "title", "Mona Lisa", "artist", "Leonardo da Vinci",
               "year", "1503",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/800px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg"),
        Map.of("id", "12", "title", "The Last Supper", "artist", "Leonardo da Vinci",
               "year", "1498",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/0/08/Leonardo_da_Vinci_%281452-1519%29_-_The_Last_Supper_%281495-1498%29.jpg"),
        Map.of("id", "13", "title", "The Garden of Heavenly Delights", "artist", "Hieronymous Bosch",
               "year", "1500",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/3/38/Jheronimus_Bosch_023.jpg"),
        Map.of("id", "14", "title", "The Last Judgment", "artist", "Hieronymous Bosch",
               "year", "1486",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/4/47/Last_judgement_Bosch.jpg"),
        Map.of("id", "15", "title", "Wanderer Above the Sea of Fog", "artist", "Caspar David Friedrich",
               "year", "1818",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/a/af/Caspar_David_Friedrich_-_Wanderer_above_the_Sea_of_Fog.jpeg"),
        Map.of("id", "16", "title", "The Sea of Ice", "artist", "Caspar David Friedrich",
               "year", "1823",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Caspar_David_Friedrich_-_Das_Eismeer_-_Hamburger_Kunsthalle_-_02.jpg/1200px-Caspar_David_Friedrich_-_Das_Eismeer_-_Hamburger_Kunsthalle_-_02.jpg"),
        Map.of("id", "17", "title", "Fallen Angel", "artist", "Alexandre Cabanel",
               "year", "1847",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/f/f7/Alexandre_Cabanel_-_Fallen_Angel.jpg"),
        Map.of("id", "18", "title", "The Birth of Venus", "artist", "Alexandre Cabanel",
               "year", "1863",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Sandro_Botticelli_-_La_nascita_di_Venere_-_Google_Art_Project_-_edited.jpg/1200px-Sandro_Botticelli_-_La_nascita_di_Venere_-_Google_Art_Project_-_edited.jpg"),
        Map.of("id", "19", "title", "The Expedition", "artist", "Wayne Barlowe",
               "year", "1977",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://files.catbox.moe/nrec64.jpg"),
        Map.of("id", "20", "title", "The Daggerwrist", "artist", "Wayne Barlowe",
               "year", "1976",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://media.surrealismtoday.com/wp-content/uploads/2022/10/12155035/daggerwrist.jpg"),
        Map.of("id", "21", "title", "Brain Salad Surgery", "artist", "H.R Giger",
               "year", "1973",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://media1.jpc.de/image/w1155/front/0/4050538180299.jpg"),
        Map.of("id", "22", "title", "Man Proposes, God Disposes", "artist", "Sir Edwin Landseer",
               "year", "1864",
               "imageUrl", "http://localhost:5443/api/proxy?url=https://images.theconversation.com/files/58700/original/rdkrjk2f-1410359010.jpg")
    );

    public static List<Map<String, String>> getInMemoryArtList() {
        return IN_MEMORY_ART_LIST;
    }

    @GetMapping("/artworks")
    public List<Map<String, String>> getArtworks() {
        return IN_MEMORY_ART_LIST;
    }

    @GetMapping("/proxy")
    public ResponseEntity<byte[]> proxyImage(@RequestParam String url) {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();

            ResponseEntity<byte[]> response = restTemplate.exchange(
                url, HttpMethod.GET, null, byte[].class);

            headers.setContentType(response.getHeaders().getContentType());

            return new ResponseEntity<>(response.getBody(), headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }
}



file: CommentController.java
contents:
package com.artgallery.art_gallery.controller;

import com.artgallery.art_gallery.model.Comment;
import com.artgallery.art_gallery.model.Art;
import com.artgallery.art_gallery.model.UserArt;
import com.artgallery.art_gallery.repository.CommentRepository;
import com.artgallery.art_gallery.repository.ArtRepository;
import com.artgallery.art_gallery.repository.UserArtRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@RestController
@RequestMapping("/api/comments")
@CrossOrigin(origins = "http://localhost:4200")
public class CommentController {

    @Autowired
    private CommentRepository commentRepository;

    @Autowired
    private ArtRepository artRepository;

    @Autowired
    private UserArtRepository userArtRepository;

    // Helper to hash password so we never store raw password
    private String hashPassword(String plain) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(plain.getBytes());
        StringBuilder hexString = new StringBuilder();
        for (byte b : hash) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }

    // ============== ADD COMMENT ==============
    @PostMapping
    public ResponseEntity<?> addComment(
            @RequestParam Long artId,
            @RequestParam String text,
            @RequestParam(required=false) String username,
            @RequestParam(required=false) String password
    ) {
        try {
            Comment comment = new Comment();
            comment.setArtId(artId);
            String usedName = (username == null || username.trim().isEmpty()) ? "Guest" : username.trim();
            comment.setUsername(usedName);
            comment.setText(text);
            comment.setCreatedAt(LocalDateTime.now());

            if (!usedName.equalsIgnoreCase("Guest") && password != null && !password.trim().isEmpty()) {
                comment.setHashedPassword(hashPassword(password.trim()));
            } else {
                comment.setHashedPassword(null);
            }

            // Determine if this artId belongs to main Art or userArt
            boolean isInMain = artRepository.findById(artId).isPresent();
            boolean isInUser = userArtRepository.findById(artId).isPresent();
            if (isInMain) {
                comment.setArtSource("MAIN");
            } else if (isInUser) {
                comment.setArtSource("USER");
            } else {
                // Possibly we do a quick check if artId is in the static list from ArtController
                List<Map<String,String>> mainList = ArtController.getInMemoryArtList();
                boolean foundInMemory = mainList.stream()
                   .anyMatch(m -> m.get("id").equals(String.valueOf(artId)));
                if(foundInMemory) {
                    comment.setArtSource("MAIN");
                } else {
                    comment.setArtSource(null);
                }
            }

            commentRepository.save(comment);
            return new ResponseEntity<>(comment, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Error adding comment: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // ============== GET RECENT COMMENTS ==============
    @GetMapping("/recent")
    public ResponseEntity<?> getRecentComments() {
        List<Comment> comments = commentRepository.findAllByOrderByCreatedAtDesc();
        List<Map<String, Object>> result = new ArrayList<>();

        // We'll fetch the in-memory list once
        List<Map<String,String>> mainList = ArtController.getInMemoryArtList();

        for (Comment c : comments) {
            Map<String, Object> out = new HashMap<>();
            out.put("id", c.getId());
            out.put("text", c.getText());
            out.put("username", c.getUsername());
            out.put("createdAt", c.getCreatedAt().toString());
            out.put("isUser", c.getHashedPassword() != null);

            String title = "Unknown Title";
            String artist = "Unknown Artist";

            if ("MAIN".equalsIgnoreCase(c.getArtSource())) {
                // see if in DB
                Art dbArt = artRepository.findById(c.getArtId()).orElse(null);
                if (dbArt != null) {
                    title = dbArt.getTitle();
                    artist = dbArt.getArtist();
                } else {
                    // check in-memory list
                    for (Map<String,String> m : mainList) {
                        if (m.get("id").equals(String.valueOf(c.getArtId()))) {
                            title = m.get("title");
                            artist = m.get("artist");
                            break;
                        }
                    }
                }
            } else if ("USER".equalsIgnoreCase(c.getArtSource())) {
                // check userArt db
                Optional<UserArt> optionalUA = userArtRepository.findById(c.getArtId());
                if (optionalUA.isPresent()) {
                    UserArt ua = optionalUA.get();
                    title = ua.getTitle();
                    artist = ua.getArtist();
                }
            }

            out.put("artTitle", title);
            out.put("artArtist", artist);
            out.put("artId", c.getArtId());
            result.add(out);
        }

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    // ============== DELETE COMMENT ==============
    @PostMapping("/delete")
    public ResponseEntity<?> deleteComment(
        @RequestParam Long commentId,
        @RequestParam(required=false) String username,
        @RequestParam(required=false) String password
    ) {
        try {
            Optional<Comment> optional = commentRepository.findById(commentId);
            if (!optional.isPresent()) {
                return new ResponseEntity<>("Comment not found", HttpStatus.BAD_REQUEST);
            }
            Comment c = optional.get();
            if (c.getHashedPassword() == null) {
                return new ResponseEntity<>("Cannot delete a Guest comment", HttpStatus.FORBIDDEN);
            }
            if (username == null || password == null) {
                return new ResponseEntity<>("Username + password required", HttpStatus.BAD_REQUEST);
            }
            if (!c.getUsername().equalsIgnoreCase(username.trim())) {
                return new ResponseEntity<>("Incorrect username for this comment", HttpStatus.FORBIDDEN);
            }
            String hashed = hashPassword(password.trim());
            if (!hashed.equals(c.getHashedPassword())) {
                return new ResponseEntity<>("Incorrect login", HttpStatus.FORBIDDEN);
            }
            commentRepository.delete(c);
            return new ResponseEntity<>("Deleted comment successfully", HttpStatus.OK);
        } catch(Exception e) {
            return new ResponseEntity<>("Error deleting comment: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // ============== EDIT COMMENT ==============
    @PostMapping("/edit")
    public ResponseEntity<?> editComment(
        @RequestParam Long commentId,
        @RequestParam String newText,
        @RequestParam(required=false) String username,
        @RequestParam(required=false) String password
    ) {
        try {
            Optional<Comment> optional = commentRepository.findById(commentId);
            if (!optional.isPresent()) {
                return new ResponseEntity<>("Comment not found", HttpStatus.BAD_REQUEST);
            }
            Comment c = optional.get();
            if (c.getHashedPassword() == null) {
                return new ResponseEntity<>("Cannot edit a Guest comment", HttpStatus.FORBIDDEN);
            }
            if (username == null || password == null) {
                return new ResponseEntity<>("Username + password required", HttpStatus.BAD_REQUEST);
            }
            if (!c.getUsername().equalsIgnoreCase(username.trim())) {
                return new ResponseEntity<>("Incorrect username for this comment", HttpStatus.FORBIDDEN);
            }
            String hashed = hashPassword(password.trim());
            if (!hashed.equals(c.getHashedPassword())) {
                return new ResponseEntity<>("Incorrect login", HttpStatus.FORBIDDEN);
            }
            c.setText(newText);
            commentRepository.save(c);
            return new ResponseEntity<>("Edited comment successfully", HttpStatus.OK);
        } catch(Exception e) {
            return new ResponseEntity<>("Error editing comment: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



file: UserArtController.java
contents:
package com.artgallery.art_gallery.controller;

import com.artgallery.art_gallery.model.UserArt;
import com.artgallery.art_gallery.repository.UserArtRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;
import java.util.Base64;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@RestController
@RequestMapping("/api/user-art")
@CrossOrigin(origins = "http://localhost:4200")
public class UserArtController {

    @Autowired
    private UserArtRepository userArtRepository;

    // Helper to hash password so we never store raw password
    private String hashPassword(String plain) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(plain.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : hash) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    // Get all user-submitted artworks
    @GetMapping
    public List<UserArt> getAllUserArt() {
        return userArtRepository.findAll();
    }

    // Create / upload a new user artwork
    // user might be guest => no password => hashedPassword = null
    // if user => store hashed password => can later edit / delete
    @PostMapping(value = "/upload", consumes = { MediaType.MULTIPART_FORM_DATA_VALUE })
    public ResponseEntity<?> uploadNewArt(
         @RequestParam("file") MultipartFile file,
         @RequestParam("title") String title,
         @RequestParam("artist") String artist,
         @RequestParam("artYear") Integer artYear,
         @RequestParam(required=false) String username,
         @RequestParam(required=false) String password
    ) {
        try {
            String fileName = file.getOriginalFilename();
            String contentType = file.getContentType();
            if (contentType == null) {
                return new ResponseEntity<>("Could not determine file content type", HttpStatus.BAD_REQUEST);
            }
            if (!contentType.startsWith("image/")) {
                return new ResponseEntity<>("Only image/* allowed", HttpStatus.BAD_REQUEST);
            }
            if (fileName == null) {
                return new ResponseEntity<>("Invalid file name", HttpStatus.BAD_REQUEST);
            }

            byte[] fileBytes = file.getBytes();
            String base64 = Base64.getEncoder().encodeToString(fileBytes);
            String dataUri = "data:" + contentType + ";base64," + base64;

            UserArt userArt = new UserArt();
            userArt.setTitle(title);
            userArt.setArtist(artist);
            userArt.setArtYear(artYear);
            userArt.setImageUrl(dataUri);

            if (username != null && !username.trim().isEmpty() && password != null && !password.trim().isEmpty()) {
                // store hashed
                String hashed = hashPassword(password.trim());
                userArt.setHashedPassword(hashed);
            } else {
                userArt.setHashedPassword(null);
            }

            userArtRepository.save(userArt);
            return new ResponseEntity<>(userArt, HttpStatus.OK);

        } catch (Exception e) {
            return new ResponseEntity<>("Upload error: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Edit / re-upload
    // user must supply correct password if hashedPassword != null
    @PostMapping(value = "/edit", consumes = { MediaType.MULTIPART_FORM_DATA_VALUE })
    public ResponseEntity<?> editArt(
         @RequestParam Long artId,
         @RequestParam("file") MultipartFile file,
         @RequestParam(required=false) String username,
         @RequestParam(required=false) String password
    ) {
        try {
            Optional<UserArt> optional = userArtRepository.findById(artId);
            if (optional.isEmpty()) {
                return new ResponseEntity<>("UserArt not found", HttpStatus.BAD_REQUEST);
            }
            UserArt userArt = optional.get();
            if (userArt.getHashedPassword() == null) {
                return new ResponseEntity<>("This artwork was uploaded by a guest. Cannot edit.", HttpStatus.FORBIDDEN);
            }
            if (username == null || password == null) {
                return new ResponseEntity<>("Username + password required to edit.", HttpStatus.BAD_REQUEST);
            }
            // check password
            String hashed = hashPassword(password.trim());
            if (!hashed.equals(userArt.getHashedPassword())) {
                return new ResponseEntity<>("Incorrect login.", HttpStatus.FORBIDDEN);
            }

            String contentType = file.getContentType();
            if (contentType == null || !contentType.startsWith("image/")) {
                return new ResponseEntity<>("Only image/* allowed", HttpStatus.BAD_REQUEST);
            }

            byte[] fileBytes = file.getBytes();
            String base64 = Base64.getEncoder().encodeToString(fileBytes);
            String dataUri = "data:" + contentType + ";base64," + base64;

            userArt.setImageUrl(dataUri);
            userArtRepository.save(userArt);
            return new ResponseEntity<>("Artwork updated!", HttpStatus.OK);

        } catch (NoSuchAlgorithmException ex) {
            return new ResponseEntity<>("Error hashing password", HttpStatus.INTERNAL_SERVER_ERROR);
        } catch (Exception e) {
            return new ResponseEntity<>("Edit error: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Delete user art
    @PostMapping("/delete")
    public ResponseEntity<?> deleteArt(
        @RequestParam Long artId,
        @RequestParam(required=false) String username,
        @RequestParam(required=false) String password
    ) {
        try {
            Optional<UserArt> optional = userArtRepository.findById(artId);
            if (optional.isEmpty()) {
                return new ResponseEntity<>("UserArt not found", HttpStatus.BAD_REQUEST);
            }
            UserArt userArt = optional.get();
            // if guest => cannot delete
            if (userArt.getHashedPassword() == null) {
                return new ResponseEntity<>("This artwork was uploaded by a guest. Cannot delete.", HttpStatus.FORBIDDEN);
            }
            if (username == null || password == null) {
                return new ResponseEntity<>("Username + password required to delete", HttpStatus.BAD_REQUEST);
            }
            String hashed = hashPassword(password.trim());
            if (!hashed.equals(userArt.getHashedPassword())) {
                return new ResponseEntity<>("Incorrect login.", HttpStatus.FORBIDDEN);
            }

            userArtRepository.delete(userArt);
            return new ResponseEntity<>("UserArt deleted", HttpStatus.OK);

        } catch (NoSuchAlgorithmException ex) {
            return new ResponseEntity<>("Error hashing password", HttpStatus.INTERNAL_SERVER_ERROR);
        } catch(Exception e) {
            return new ResponseEntity<>("Delete error: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



file: CommentDto.java
contents:
package com.artgallery.art_gallery.dto;

import lombok.Data;

@Data
public class CommentDto {
    private Long artId;
    private String commentText;
    private String username;
}



file: Art.java
contents:
package com.artgallery.art_gallery.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

/**
 * Represents a built-in Artwork entity for the main (non-user) gallery.
 */
@Entity
@Data
public class Art {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Basic fields to align with references in ArtService, ArtRepository
    private String title;
    private String artist;
    private String imageUrl;
    private String description;

    // You can add more fields if necessary
}



file: Comment.java
contents:
package com.artgallery.art_gallery.model;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Entity
@Data
public class Comment {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long artId;         // ID of either Art or UserArt
    private String username;    // "Guest" or a chosen user
    private String text;
    private LocalDateTime createdAt;

    // If "User" selected, store hashed password. If "Guest", this can be null or empty.
    private String hashedPassword;

    // We’ll store which "type" of art: "main" or "user" or null
    // Alternatively, we try to see if "artId" is found in Art or in UserArt.
    // We'll keep a field for clarity:
    private String artSource; // "MAIN" or "USER"
}



file: UserArt.java
contents:
package com.artgallery.art_gallery.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
public class UserArt {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String artist;
    private Integer artYear;

    /**
     * Use @Lob so we can store large strings (Base64 data URIs).
     * This avoids "Value too long for column" errors in H2, etc.
     */
    @Lob
    private String imageUrl;

    // If user is "guest", hashedPassword = null => cannot edit or delete
    private String hashedPassword; 
}



file: ArtRepository.java
contents:
package com.artgallery.art_gallery.repository;

import com.artgallery.art_gallery.model.Art;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface ArtRepository extends JpaRepository<Art, Long> {
    List<Art> findByTitleContaining(String title);
}



file: CommentRepository.java
contents:
package com.artgallery.art_gallery.repository;

import com.artgallery.art_gallery.model.Comment;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface CommentRepository extends JpaRepository<Comment, Long> {
    List<Comment> findAllByOrderByCreatedAtDesc();
}



file: UserArtRepository.java
contents:
package com.artgallery.art_gallery.repository;

import com.artgallery.art_gallery.model.UserArt;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface UserArtRepository extends JpaRepository<UserArt, Long> {
    // For filtering by artist name
    List<UserArt> findByArtistIgnoreCase(String artist);

    // Searching by partial title/artist (if needed)
    List<UserArt> findByTitleContainingIgnoreCase(String title);
    List<UserArt> findByArtistContainingIgnoreCase(String artist);
}



file: ArtService.java
contents:
package com.artgallery.art_gallery.service;

import com.artgallery.art_gallery.model.Art;
import com.artgallery.art_gallery.repository.ArtRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class ArtService {
    private final ArtRepository artRepository;

    public List<Art> getAllArt() {
        return artRepository.findAll();
    }

    public Art saveMetArtwork(Map<String, Object> artData) {
        Art art = new Art();
        art.setTitle((String) artData.get("title"));
        art.setArtist((String) artData.get("artistDisplayName"));
        art.setImageUrl((String) artData.get("primaryImage"));
        art.setDescription((String) artData.get("medium"));

        return artRepository.save(art);
    }
}



file: MetMuseumService.java
contents:
package com.artgallery.art_gallery.service;

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.RestClientException;

import java.util.Map;

@Service
public class MetMuseumService {

    private static final String BASE_URL = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";

    public Map<String, Object> fetchArtworkDetails(int objectId) {
        RestTemplate restTemplate = new RestTemplate();

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> response = restTemplate.getForObject(BASE_URL + objectId, Map.class);

            if (response == null) return null;

            String primaryImage = (String) response.get("primaryImage");
            String primaryImageSmall = (String) response.get("primaryImageSmall");

            // Exclude artworks with no valid images
            if ((primaryImage == null || primaryImage.isEmpty()) &&
                (primaryImageSmall == null || primaryImageSmall.isEmpty())) {
                return null; // No valid image found
            }

            // Use smaller image if primaryImage is missing
            if (primaryImage == null || primaryImage.isEmpty()) {
                response.put("primaryImage", primaryImageSmall);
            }

            return response;

        } catch (RestClientException e) {
            // Log the error and return null
            System.err.println("Error fetching artwork: " + e.getMessage());
            return null;
        }
    }
}



file: application.properties
contents:
spring.datasource.url=jdbc:h2:mem:artgallerydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
server.port=5443
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB



file: application.properties.bak
contents:
spring.datasource.url=jdbc:h2:mem:artgallerydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
server.port=5443



file: artworks.json
contents:



file: ArtGalleryApplicationTests.java
contents:
package com.artgallery.art_gallery;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ArtGalleryApplicationTests {

	@Test
	void contextLoads() {
	}

}



file: application.properties
contents:
spring.datasource.url=jdbc:h2:mem:artgallerydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
server.port=5443
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB



file: application.properties.bak
contents:
spring.datasource.url=jdbc:h2:mem:artgallerydb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.hibernate.ddl-auto=update
spring.jpa.open-in-view=false
server.port=5443



file: artworks.json
contents:



file: createdFiles.lst
contents:



file: inputFiles.lst
contents:
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\ArtGalleryApplication.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\controller\CommentController.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\repository\CommentRepository.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\model\Art.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\model\Comment.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\controller\UserArtController.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\service\ArtService.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\repository\UserArtRepository.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\service\MetMuseumService.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\config\RestTemplateConfig.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\dto\CommentDto.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\repository\ArtRepository.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\controller\ArtController.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\model\UserArt.java
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\main\java\com\artgallery\art_gallery\config\webConfig.java



file: createdFiles.lst
contents:



file: inputFiles.lst
contents:
C:\Users\MASTER\Documents\VCS\art-gallery\backend\src\test\java\com\artgallery\art_gallery\ArtGalleryApplicationTests.java



file: app.component.css
contents:



file: app.component.html
contents:
<div class="app-header">
  <h1>Art Gallery Project looool</h1>
  <div class="ip-info">
  </div>
  <button (click)="toggleComments()">Show Most Recent Comments</button>
</div>

<div *ngIf="showComments" class="comments-panel">
  <h2>Recent Comments</h2>
  <div *ngIf="recentComments.length === 0">No comments found.</div>
  <ul>
    <li *ngFor="let c of recentComments">
      <!-- We'll assume we have to guess if it's user or guest by checking if c.username=Guest or some field later -->
      <strong [ngClass]="{'comment-user-guest': (c.username==='Guest'), 'comment-user-registered': (c.username!=='Guest')}">
        {{ c.username }}
      </strong>
      <span class="comment-art-reference">
        on {{ c.artTitle || 'Unknown Title' }} by {{ c.artArtist || 'Unknown Artist' }}:
      </span>
      {{ c.text }} <em>({{ c.createdAt }})</em>
      
      <!-- Example Delete/Edit Buttons -->
      <div *ngIf="c.username!=='Guest'">
        <button (click)="deleteComment(c)">Delete</button>
        <button (click)="editComment(c)">Edit</button>
      </div>
    </li>
  </ul>
</div>

<router-outlet></router-outlet>



file: app.component.spec.ts
contents:
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'art-gallery-frontend' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app['title']).toEqual('art-gallery-frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, art-gallery-frontend');
  });
});



file: app.component.ts
contents:
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';

interface CommentItem {
  id: number;
  text: string;
  username: string;
  createdAt: string;
  artTitle: string;
  artArtist: string;
  isUser: boolean; // we use to highlight
  artId: number;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  template: `
    <div class="app-header">
      <h1>Art Gallery Project</h1>
      <h1>Internet Programming UACS || 2024 || by Tristan Beason, ID 5443</h1>
      <button (click)="toggleComments()">Show Most Recent Comments</button>
    </div>

    <div *ngIf="showComments" class="comments-panel">
      <h2>Recent Comments</h2>
      <div *ngIf="recentComments.length === 0">No comments found.</div>
      <ul>
        <li *ngFor="let c of recentComments">
          <span [ngStyle]="{'color': c.isUser ? 'blue' : 'inherit'}">
            <strong>{{ c.username }}</strong>
          </span>
           on
          <em>{{ c.artTitle }}</em> by <em>{{ c.artArtist }}</em>:
          {{ c.text }} 
          <small>({{ c.createdAt }})</small>
          <div *ngIf="c.isUser">
            <!-- We show 'Edit' / 'Delete' for user comments -->
            <button (click)="attemptDelete(c)">Delete</button>
            <button (click)="attemptEdit(c)">Edit</button>
          </div>
        </li>
      </ul>
    </div>

    <router-outlet></router-outlet>
  `,
  styles: [`
    .app-header {
      background-color: #efefef;
      padding: 10px;
    }
    .comments-panel {
      background-color: rgba(255,255,255,0.9);
      border: 1px solid #ccc;
      margin: 10px;
      padding: 10px;
      border-radius: 6px;
    }
    ul {
      list-style-type: none;
      padding-left: 0;
    }
    li {
      margin-bottom: 1em;
    }
  `]
})
export class AppComponent {
  [x: string]: any;
  showComments = false;
  recentComments: CommentItem[] = [];

  toggleComments() {
    this.showComments = !this.showComments;
    if (this.showComments) {
      this.fetchRecentComments();
    }
  }

  fetchRecentComments() {
    fetch('http://localhost:5443/api/comments/recent')
      .then(resp => resp.json())
      .then((data: CommentItem[]) => {
        this.recentComments = data;
      })
      .catch(err => {
        console.error('Error fetching recent comments:', err);
      });
  }

  attemptDelete(c: CommentItem) {
    const username = prompt("Enter username for comment deletion:", c.username);
    if (!username) { alert("Aborted."); return; }
    const password = prompt("Enter password for user '" + username + "':");
    if(!password) { alert("Aborted."); return; }

    const formData = new FormData();
    formData.append('commentId', String(c.id));
    formData.append('username', username);
    formData.append('password', password);

    fetch('http://localhost:5443/api/comments/delete', {
      method: 'POST',
      body: formData
    })
    .then(res => res.text())
    .then(txt => {
      if (txt.startsWith("Deleted comment successfully")) {
        alert(txt);
        this.fetchRecentComments();
      } else {
        alert(txt);
      }
    })
    .catch(err => {
      console.error("Error deleting comment:", err);
    });
  }

  attemptEdit(c: CommentItem) {
    const username = prompt("Enter username for comment edit:", c.username);
    if (!username) { alert("Aborted."); return; }
    const password = prompt("Enter password for user '" + username + "':");
    if(!password) { alert("Aborted."); return; }
    const newText = prompt("Enter new comment text:", c.text);
    if(!newText) { alert("Aborted."); return; }

    const formData = new FormData();
    formData.append('commentId', String(c.id));
    formData.append('newText', newText);
    formData.append('username', username);
    formData.append('password', password);

    fetch('http://localhost:5443/api/comments/edit', {
      method: 'POST',
      body: formData
    })
    .then(res => res.text())
    .then(txt => {
      if (txt.startsWith("Edited comment successfully")) {
        alert(txt);
        this.fetchRecentComments();
      } else {
        alert(txt);
      }
    })
    .catch(err => {
      console.error("Error editing comment:", err);
    });
  }
}



file: app.config.ts
contents:
import { ApplicationConfig, importProvidersFrom } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';
import { provideZoneChangeDetection } from '@angular/core';
import { FormsModule } from '@angular/forms';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(),
    importProvidersFrom(FormsModule)
  ]
};



file: app.routes.ts
contents:
import { Routes } from '@angular/router';
import { MainCarouselComponent } from './components/main-carousel/main-carousel.component';
import { AllArtworksComponent } from './components/all-artworks/all-artworks.component';
import { UserGalleryComponent } from './components/user-gallery/user-gallery.component';

export const routes: Routes = [
  { path: '', redirectTo: 'gallery', pathMatch: 'full' },
  { path: 'gallery', component: MainCarouselComponent },
  { path: 'gallery/all', component: AllArtworksComponent },
  { path: 'gallery/user', component: UserGalleryComponent },
];



file: all-artworks.component.css
contents:
.all-artworks-page {
  margin: 20px;
}

.controls {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
  margin-bottom: 15px;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 15px;
}

.art-tile {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: center;
}

.art-tile img {
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto;
}

.comment-form {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-top: 8px;
}

.nav {
  margin-top: 20px;
}



file: all-artworks.component.html
contents:
<div class="all-artworks-page">
  <h2>All Artworks</h2>

  <div class="controls">
    <label>Sort by:</label>
    <select [(ngModel)]="sortKey" (change)="onSortKeyChange(sortKey)">
      <option value="title">By Title</option>
      <option value="artist">By Author</option>
      <option value="year">By Year</option>
    </select>
    <button (click)="toggleOrder()">{{ sortOrderAsc ? 'Asc' : 'Desc' }}</button>

    <label>Filter By Artist:</label>
    <select [(ngModel)]="selectedArtist" (change)="onArtistChange()">
      <option value="All">All</option>
      <option *ngFor="let a of artists" [value]="a">{{ a }}</option>
    </select>

    <input type="text" [(ngModel)]="searchTerm" placeholder="Search..." />
    <button (click)="onSearch()">Search</button>
  </div>

  <div class="grid-container">
    <div class="art-tile" *ngFor="let art of artworks; index as i">
      <img [src]="art.imageUrl" [alt]="art.title" (click)="openNewTab(art)"/>
      <h4>{{ art.title }}</h4>
      <p>Artist: {{ art.artist }}</p>
      <p>Year: {{ art.year }}</p>
      <button (click)="openCommentForm(i)">
        {{ showCommentFormIndex === i ? 'Cancel' : 'Add Comment' }}
      </button>
      <div class="comment-form" *ngIf="showCommentFormIndex === i">
        <input type="text" placeholder="Name (optional)" [(ngModel)]="commentUsername" />
        <textarea placeholder="Your comment" [(ngModel)]="commentText"></textarea>
        <button (click)="submitComment(i)">Submit</button>
      </div>
    </div>
  </div>

  <div class="nav">
    <button [routerLink]="['/gallery']">Back to Main Carousel</button>
    <button [routerLink]="['/gallery/user']">User Gallery</button>
  </div>
</div>



file: all-artworks.component.ts
contents:
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { ArtService } from '../../services/art.service';

@Component({
  selector: 'app-all-artworks',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink],
  template: `
  <div class="all-artworks-page">
    <h2>All Artworks</h2>

    <div class="controls">
      <label>Sort by:</label>
      <select [(ngModel)]="sortKey" (change)="onSortKeyChange(sortKey)">
        <option value="title">By Title</option>
        <option value="artist">By Author</option>
        <option value="year">By Year</option>
      </select>
      <button (click)="toggleOrder()">{{ sortOrderAsc ? 'Asc' : 'Desc' }}</button>

      <label>Filter By Artist:</label>
      <select [(ngModel)]="selectedArtist" (change)="onArtistChange()">
        <option value="All">All</option>
        <option *ngFor="let a of artists" [value]="a">{{ a }}</option>
      </select>

      <input type="text" [(ngModel)]="searchTerm" placeholder="Search..." />
      <button (click)="onSearch()">Search</button>
    </div>

    <div class="grid-container">
      <div class="art-tile" *ngFor="let art of artworks; index as i">
        <img [src]="art.imageUrl" [alt]="art.title" (click)="openNewTab(art)"/>
        <h4>{{ art.title }}</h4>
        <p>Artist: {{ art.artist }}</p>
        <p>Year: {{ art.year }}</p>
        <button (click)="openCommentForm(i)">
          {{ showCommentFormIndex === i ? 'Cancel' : 'Add Comment' }}
        </button>
        <div class="comment-form" *ngIf="showCommentFormIndex === i">
          <div class="radio-group">
            <label>
              <input type="radio" name="userType-{{i}}" value="guest" [(ngModel)]="selectedUserType[i]" (change)="onUserTypeChange(i)" checked />
              Guest
            </label>
            <label>
              <input type="radio" name="userType-{{i}}" value="user" [(ngModel)]="selectedUserType[i]" (change)="onUserTypeChange(i)" />
              User
            </label>
          </div>

          <div *ngIf="selectedUserType[i] === 'user'">
            <input type="text" placeholder="Username" [(ngModel)]="commentUsername[i]" />
            <input type="password" placeholder="Password" [(ngModel)]="commentPassword[i]" />
          </div>

          <textarea placeholder="Your comment" [(ngModel)]="commentText[i]"></textarea>
          <button (click)="submitComment(i)">Submit</button>
        </div>
      </div>
    </div>

    <div class="nav">
      <button [routerLink]="['/gallery']">Back to Main Carousel</button>
      <button [routerLink]="['/gallery/user']">User Gallery</button>
    </div>
  </div>
  `,
  styleUrls: ['./all-artworks.component.css']
})
export class AllArtworksComponent implements OnInit {
  artworks: any[] = [];
  sortKey = 'title';
  sortOrderAsc = true;
  selectedArtist = 'All';
  artists: string[] = [];
  searchTerm = '';

  // For adding a comment:
  showCommentFormIndex: number | null = null;
  // We'll store per-index arrays
  selectedUserType: ('guest'|'user')[] = [];
  commentUsername: string[] = [];
  commentPassword: string[] = [];
  commentText: string[] = [];

  constructor(private artService: ArtService) {}

  ngOnInit(): void {
    this.fetchAll();
  }

  fetchAll() {
    this.artService.getArtworks().subscribe({
      next: (data) => {
        this.artworks = data;
        this.collectArtistNames();
        this.applySorting();
      },
      error: (err) => console.error(err),
    });
  }

  collectArtistNames() {
    const setOfArtists = new Set<string>();
    this.artworks.forEach(a => setOfArtists.add(a.artist));
    this.artists = Array.from(setOfArtists.values()).sort();
  }

  applySorting() {
    switch (this.sortKey) {
      case 'title':
        this.artworks.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'artist':
        this.artworks.sort((a, b) => a.artist.localeCompare(b.artist));
        break;
      case 'year':
        this.artworks.sort((a, b) =>
          parseInt(a.year || '0', 10) - parseInt(b.year || '0', 10)
        );
        break;
    }
    if (!this.sortOrderAsc) {
      this.artworks.reverse();
    }
    this.filterByArtist();
    this.applySearch();
  }

  toggleOrder() {
    this.sortOrderAsc = !this.sortOrderAsc;
    this.applySorting();
  }

  onSortKeyChange(newKey: string) {
    this.sortKey = newKey;
    this.applySorting();
  }

  filterByArtist() {
    if (this.selectedArtist === 'All') return;
    this.artworks = this.artworks.filter(a => a.artist === this.selectedArtist);
  }

  onArtistChange() {
    this.fetchAll();
  }

  applySearch() {
    if (!this.searchTerm.trim()) return;
    this.artworks = this.artworks.filter(a =>
      a.title.toLowerCase().includes(this.searchTerm.toLowerCase())
      || a.artist.toLowerCase().includes(this.searchTerm.toLowerCase())
    );
  }

  onSearch() {
    this.fetchAll();
  }

  openCommentForm(i: number) {
    this.showCommentFormIndex = (this.showCommentFormIndex === i) ? null : i;
    // init arrays
    if (this.showCommentFormIndex === i) {
      this.selectedUserType[i] = 'guest';
      this.commentUsername[i] = '';
      this.commentPassword[i] = '';
      this.commentText[i] = '';
    }
  }

  onUserTypeChange(i: number) {
    if (this.selectedUserType[i] === 'guest') {
      this.commentUsername[i] = '';
      this.commentPassword[i] = '';
    }
  }

  submitComment(i: number) {
    const art = this.artworks[i];
    const artId = parseInt(art.id, 10);

    this.artService.addCommentWithUserOption(
      artId,
      this.commentText[i],
      this.selectedUserType[i] === 'user' ? this.commentUsername[i] : undefined,
      this.selectedUserType[i] === 'user' ? this.commentPassword[i] : undefined
    ).subscribe({
      next: () => {
        alert('Comment added!');
        this.showCommentFormIndex = null;
      },
      error: (err) => {
        console.error('Error adding comment:', err);
        alert('Failed to add comment.');
      }
    });
  }

  openNewTab(art: any) {
    const imageUrl = art.imageUrl;
    const newTab = window.open('', '_blank');
    if (!newTab) {
      console.warn('Popup blocked or failed to open new tab');
      return;
    }
    newTab.document.write(`
      <html>
        <head>
          <title>${art.title || 'Artwork'}</title>
          <style>
            html, body {
              margin: 0;
              padding: 0;
              background-color: black;
              height: 100%;
              overflow: hidden;
              display: flex;
              align-items: center;
              justify-content: center;
            }
            img {
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
            }
          </style>
        </head>
        <body>
          <img src="${imageUrl}" alt="Enlarged" />
        </body>
      </html>
    `);
    newTab.document.close();
  }
}



file: artwork-detail.component.css
contents:



file: artwork-detail.component.html
contents:
<p>artwork-detail works!</p>



file: artwork-detail.component.spec.ts
contents:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ArtworkDetailComponent } from './artwork-detail.component';

describe('ArtworkDetailComponent', () => {
  let component: ArtworkDetailComponent;
  let fixture: ComponentFixture<ArtworkDetailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ArtworkDetailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ArtworkDetailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



file: artwork-detail.component.ts
contents:
import { Component } from '@angular/core';

@Component({
  selector: 'app-artwork-detail',
  imports: [],
  templateUrl: './artwork-detail.component.html',
  styleUrl: './artwork-detail.component.css'
})
export class ArtworkDetailComponent {

}



file: artwork-list.component.css
contents:
.container {
  font-family: 'Georgia', serif;
  background-color: #121212;
  color: gold;
  padding: 20px;
  border-radius: 8px;
  max-width: 800px;
  margin: auto;
  text-align: center;
}

input {
  margin: 10px;
  padding: 8px;
  font-size: 16px;
  border: 2px solid gold;
  background-color: black;
  color: gold;
}
button {
  background-color: #333;
  color: white;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  margin-bottom: 20px;
}

button:hover {
  background-color: #555;
}

h2 {
  color: #444;
}

img {
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 4px;
}



file: artwork-list.component.html
contents:
<div class="gallery-container">
  <!-- Button to toggle gallery visibility -->
  <button (click)="toggleGallery()">
    {{ galleryVisible ? 'Close the Gallery' : 'Open the Gallery' }}
  </button>

  <!-- Conditionally display the gallery -->
  <div *ngIf="galleryVisible" class="gallery">
    <h2>Art Gallery</h2>
    <div *ngFor="let artwork of artworks" class="artwork-item">
      <h3>{{ artwork.title }} by {{ artwork.artist }}</h3>
      <img [src]="artwork.imageUrl" alt="{{ artwork.title }}" style="max-width: 300px; height: auto;" />
      <p>URL: {{ artwork.imageUrl }}</p> <!-- Show the URL for debugging -->
    </div>
  </div>
</div>




file: artwork-list.component.spec.ts
contents:
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ArtworkListComponent } from './artwork-list.component';

describe('ArtworkListComponent', () => {
  let component: ArtworkListComponent;
  let fixture: ComponentFixture<ArtworkListComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ArtworkListComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ArtworkListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



file: artwork-list.component.ts
contents:
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ArtService } from '../../services/art.service';

@Component({
  selector: 'app-artwork-list',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="gallery-container">
      <!-- Button to toggle gallery visibility -->
      <button (click)="toggleGallery()">
        {{ galleryVisible ? 'Close the Gallery' : 'Open the Gallery' }}
      </button>

      <!-- Conditionally display the gallery -->
      <div *ngIf="galleryVisible" class="gallery">
        <h2>Art Gallery</h2>
        <div *ngFor="let artwork of artworks" class="artwork-item">
          <h3>{{ artwork.title }} by {{ artwork.artist }}</h3>
          <img [src]="artwork.imageUrl" alt="{{ artwork.title }}" />
        </div>
      </div>
    </div>
  `,
  styles: [`
    .gallery-container {
      text-align: center;
      margin: 20px;
    }

    button {
      background-color: #333;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #555;
    }

    .gallery {
      margin-top: 20px;
    }

    .artwork-item {
      margin-bottom: 20px;
    }

    .artwork-item img {
      max-width: 300px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }
  `]
})
export class ArtworkListComponent {
  artworks: any[] = [];
  galleryVisible: boolean = false; // Initially hide the gallery

  constructor(private artService: ArtService) {}

  toggleGallery(): void {
    this.galleryVisible = !this.galleryVisible; // Toggle the gallery visibility
    if (this.galleryVisible && this.artworks.length === 0) {
      this.fetchArtworks();
    }
  }

  fetchArtworks(): void {
    this.artService.getArtworks().subscribe(
      (data) => {
        console.log('Fetched Artworks:', data);
        this.artworks = data;
      },
      (error) => {
        console.error('Error fetching artworks:', error);
      }
    );
  }
}



file: main-carousel.component.css
contents:
.carousel-page {
  text-align: center;
  margin: 20px auto;
  max-width: 90vw;
}

.sort-controls {
  margin-bottom: 10px;
}

.carousel-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
  position: relative;
}

.image-container {
  max-width: 80vw;
  max-height: 70vh;
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.image-container img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.arrow-btn {
  font-size: 1.5em;
  background: none;
  border: 1px solid #999;
  margin: 0 10px;
  cursor: pointer;
  padding: 10px;
}

.art-info {
  margin-top: 10px;
}

.comment-form {
  margin: 10px 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  max-width: 300px;
  margin: 10px auto;
}

.navigation-buttons {
  margin-top: 20px;
}



file: main-carousel.component.html
contents:
<div class="carousel-page">
  <h2 class="page-title">Gallery Carousel</h2>
  <div class="sort-controls">
    <label>Sort by:</label>
    <select [(ngModel)]="sortKey" (change)="onSortKeyChange(sortKey)">
      <option value="title">By Title</option>
      <option value="artist">By Author</option>
      <option value="year">By Year</option>
    </select>
    <button (click)="toggleOrder()">{{ sortOrderAsc ? 'Asc' : 'Desc' }}</button>
  </div>

  <div class="carousel-wrapper" *ngIf="artworks.length > 0">
    <!-- Neon green 3D arrow left -->
    <button (click)="prevImage()" class="arrow-btn left-arrow">
      &#9668;
    </button>

    <div class="image-container">
      <img [src]="artworks[currentIndex].imageUrl"
           alt="art"
           (click)="openNewTab(artworks[currentIndex])"/>
    </div>

    <!-- Neon green 3D arrow right -->
    <button (click)="nextImage()" class="arrow-btn right-arrow">
      &#9658;
    </button>
  </div>

  <div class="art-info" *ngIf="artworks.length > 0">
    <h3>{{ artworks[currentIndex].title }}</h3>
    <p><strong>Artist:</strong> {{ artworks[currentIndex].artist }}</p>
    <p><strong>Year:</strong> {{ artworks[currentIndex].year }}</p>
  </div>

  <!-- Comment button & form -->
  <div>
    <button (click)="toggleCommentForm()">Add Comment</button>
    <div class="comment-form" *ngIf="showCommentForm">
      <input type="text" placeholder="Name (optional)" [(ngModel)]="commentUsername" />
      <textarea placeholder="Your comment" [(ngModel)]="commentText"></textarea>
      <button (click)="submitComment()">Submit</button>
    </div>
  </div>

  <div class="navigation-buttons">
    <button [routerLink]="['/gallery/all']">View All Artworks</button>
    <button [routerLink]="['/gallery/user']">User Gallery</button>
  </div>
</div>



file: main-carousel.component.ts
contents:
import { Component, OnInit, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { ArtService } from '../../services/art.service';

interface Artwork {
  id: string;
  title: string;
  artist: string;
  imageUrl: string;
  year?: string;
}

@Component({
  selector: 'app-main-carousel',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink],
  templateUrl: './main-carousel.component.html',
  styleUrls: ['./main-carousel.component.css']
})
export class MainCarouselComponent implements OnInit, AfterViewInit {
  artworks: Artwork[] = [];
  currentIndex = 0;
  sortKey = 'title';
  sortOrderAsc = true;

  // For adding a comment:
  showCommentForm = false;
  commentUsername = '';
  commentText = '';

  constructor(private artService: ArtService) {}

  ngOnInit(): void {
    // Initial fetch
    this.fetchArtworks();
  }

  // Force re-check or re-fetch once view is loaded
  ngAfterViewInit(): void {
    // Some browsers or router configs can cause images not to appear on the first load.
    // We'll do a quick sanity check or re-fetch:
    if (!this.artworks || this.artworks.length === 0) {
      this.fetchArtworks();
    }
  }

  fetchArtworks() {
    this.artService.getArtworks().subscribe({
      next: (data) => {
        this.artworks = data.map((item: any) => ({
          ...item,
          year: item.year ? item.year : '1900'
        }));
        this.applySorting();
      },
      error: (err) => console.error(err),
    });
  }

  applySorting() {
    switch (this.sortKey) {
      case 'title':
        this.artworks.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'artist':
        this.artworks.sort((a, b) => a.artist.localeCompare(b.artist));
        break;
      case 'year':
        this.artworks.sort((a, b) =>
          parseInt(a.year || '0', 10) - parseInt(b.year || '0', 10)
        );
        break;
    }
    if (!this.sortOrderAsc) {
      this.artworks.reverse();
    }
  }

  onSortKeyChange(newKey: string) {
    this.sortKey = newKey;
    this.currentIndex = 0; // reset
    this.applySorting();
  }

  toggleOrder() {
    this.sortOrderAsc = !this.sortOrderAsc;
    this.applySorting();
  }

  prevImage() {
    if (this.artworks.length === 0) return;
    this.currentIndex =
      (this.currentIndex - 1 + this.artworks.length) % this.artworks.length;
  }

  nextImage() {
    if (this.artworks.length === 0) return;
    this.currentIndex =
      (this.currentIndex + 1) % this.artworks.length;
  }

  toggleCommentForm() {
    this.showCommentForm = !this.showCommentForm;
    this.commentUsername = '';
    this.commentText = '';
  }

  submitComment() {
    const artId = parseInt(this.artworks[this.currentIndex].id, 10);
    this.artService.addComment(artId, this.commentText, this.commentUsername || undefined)
      .subscribe({
        next: () => {
          alert('Comment added!');
          this.showCommentForm = false;
        },
        error: (err) => {
          console.error('Error adding comment:', err);
          alert('Failed to add comment.');
        }
      });
  }

  // Opens image in new tab, no scrollbars, auto-resize
  openNewTab(art: Artwork) {
    const imageUrl = art.imageUrl;
    const newTab = window.open('', '_blank');
    if (!newTab) {
      console.warn('Popup blocked or failed to open new tab');
      return;
    }
    newTab.document.write(`
      <html>
        <head>
          <title>${art.title || 'Artwork'}</title>
          <style>
            html, body {
              margin: 0;
              padding: 0;
              background-color: black;
              height: 100%;
              overflow: hidden; /* no scrollbar */
              display: flex;
              align-items: center;
              justify-content: center;
            }
            img {
              max-width: 100%;
              max-height: 100%;
              object-fit: contain;
              display: block;
            }
          </style>
        </head>
        <body>
          <img src="${imageUrl}" alt="Enlarged" />
        </body>
      </html>
    `);
    newTab.document.close();
  }
}



file: user-gallery.component.css
contents:
.user-gallery-page {
  margin: 20px;
}

.upload-form {
  border: 1px dashed #ccc;
  padding: 10px;
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  max-width: 400px;
}

.controls {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
  margin-bottom: 15px;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px,1fr));
  gap: 15px;
  margin-top: 20px;
}

.grid-item {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: center;
}

.grid-item img {
  max-width: 100%;
  height: auto;
  margin-bottom: 5px;
}

.comment-form {
  margin-top: 10px;
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.nav {
  margin-top: 20px;
}

.draw-btn {
  margin-top: 20px;
  font-size: 18px;
  background-color: #db572f;
}

.drawing-window {
  position: fixed;
  top: 50%;
  left: 50%;
  width: 600px;
  height: 400px;
  background: #fff;
  transform: translate(-50%, -50%);
  border: 2px solid #777;
  border-radius: 8px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
}

.drawing-header {
  background-color: #f3f3f3;
  padding: 4px 8px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.drawing-canvas {
  flex: 1;
  cursor: crosshair;
  background: #fff;
}




file: user-gallery.component.html
contents:
<div class="user-gallery-page">
  <h2>User Gallery</h2>

  <button class="draw-btn" (click)="openDrawingWindow()">Draw something!</button>

  <!-- If no userArtworks show a message -->
  <div *ngIf="userArtworks.length === 0">
    <p>No user artworks have been submitted.</p>
    <p>
      Would you like to upload something?
      <a href="#" (click)="toggleUploadForm($event)">Click here!</a>
    </p>
  </div>
  <div *ngIf="userArtworks.length > 0">
    <button (click)="toggleUploadForm()">Submit your own artwork</button>
  </div>

  <!-- Upload form -->
  <div class="upload-form" *ngIf="showUploadForm">
    <h3>Upload New Artwork</h3>
    <input type="file" (change)="handleFileInput($event)" accept="image/*" />
    <input type="text" [(ngModel)]="titleInput" placeholder="Title" />
    <input type="text" [(ngModel)]="artistInput" placeholder="Artist" />
    <input type="number" [(ngModel)]="artYearInput" placeholder="Year" />
    <button (click)="uploadNewArt()">Upload</button>
  </div>

  <div *ngIf="userArtworks.length > 0" class="controls">
    <label>Sort by:</label>
    <select [(ngModel)]="sortKey" (change)="onSortKeyChange(sortKey)">
      <option value="title">By Title</option>
      <option value="artist">By Author</option>
      <option value="artYear">By Year</option>
    </select>
    <button (click)="toggleOrder()">{{ sortOrderAsc ? 'Asc' : 'Desc' }}</button>

    <label>Filter by Artist:</label>
    <select [(ngModel)]="selectedArtist" (change)="onArtistChange()">
      <option value="All">All</option>
      <option *ngFor="let a of artists" [value]="a">{{ a }}</option>
    </select>

    <input type="text" [(ngModel)]="searchTerm" placeholder="Search..." />
    <button (click)="onSearch()">Search</button>
  </div>

  <div *ngIf="userArtworks.length > 0" class="grid-container">
    <div class="grid-item" *ngFor="let art of userArtworks; index as i">
      <img [src]="art.imageUrl" [alt]="art.title" />
      <h4>{{ art.title }}</h4>
      <p>Artist: {{ art.artist }}</p>
      <p>Year: {{ art.artYear }}</p>
      <button (click)="openCommentForm(i)">
        {{ showCommentFormIndex === i ? 'Cancel' : 'Add Comment' }}
      </button>
      <div class="comment-form" *ngIf="showCommentFormIndex === i">
        <div>
          <label><input type="radio" name="cm{{i}}" [(ngModel)]="commentMode" value="GUEST" checked>Guest</label>
          <label><input type="radio" name="cm{{i}}" [(ngModel)]="commentMode" value="USER">User</label>
        </div>
        <input type="text" placeholder="Username" [(ngModel)]="commentUsername" *ngIf="commentMode==='USER'">
        <input type="password" placeholder="Password" [(ngModel)]="commentPassword" *ngIf="commentMode==='USER'">
        <textarea placeholder="Your comment" [(ngModel)]="commentText"></textarea>
        <button (click)="submitComment(i)">Submit</button>
      </div>
    </div>
  </div>

  <div class="nav">
    <button [routerLink]="['/gallery']">Main Carousel</button>
    <button [routerLink]="['/gallery/all']">View All Main Artworks</button>
  </div>
</div>

<!-- The drawing window -->
<div class="drawing-window" *ngIf="drawingOpen">
  <div class="drawing-header">
    <span><strong>Draw Something!</strong></span>
    <div>
      <button (click)="saveDrawing()">Save</button>
      <button (click)="resetDrawing()">Reset</button>
      <button (click)="closeDrawingWindow()">X</button>
    </div>
  </div>
  <div>
    <button (click)="setMode('pencil')">Pencil</button>
    <button (click)="setMode('eraser')">Eraser</button>
  </div>
  <canvas class="drawing-canvas" #drawingCanvas
    width="600" height="340"
    (mousedown)="onMouseDown($event)"
    (mousemove)="onMouseMove($event)"
    (mouseup)="onMouseUp()"
    (mouseleave)="onMouseLeave()"></canvas>
</div>



file: user-gallery.component.ts
contents:
import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { UserArt, UserArtService } from '../../services/user-art.service';
import { ArtService } from '../../services/art.service';

@Component({
  selector: 'app-user-gallery',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterLink],
  templateUrl: './user-gallery.component.html',
  styleUrls: ['./user-gallery.component.css']
})
export class UserGalleryComponent implements OnInit {
  userArtworks: UserArt[] = [];
  sortKey = 'title';
  sortOrderAsc = true;
  selectedArtist = 'All';
  artists: string[] = [];
  searchTerm = '';

  // Upload form
  showUploadForm = false;
  titleInput = '';
  artistInput = '';
  artYearInput?: number; // renamed from 'yearInput'
  fileToUpload?: File;

  // For comment
  showCommentFormIndex: number | null = null;
  commentUsername = '';
  commentText = '';
  commentMode = 'GUEST'; // 'GUEST' or 'USER'
  commentPassword = '';

  // For "Draw something!" 
  drawingOpen = false;
  @ViewChild('drawingCanvas') drawingCanvas?: ElementRef<HTMLCanvasElement>;
  context!: CanvasRenderingContext2D | null;
  isDrawing = false;
  currentX = 0;
  currentY = 0;
  drawMode = 'pencil'; // pencil or eraser

  constructor(
    private userArtService: UserArtService,
    private artService: ArtService
  ) {}

  ngOnInit(): void {
    this.fetchUserArt();
  }

  fetchUserArt(): void {
    this.userArtService.getAll().subscribe({
      next: (data) => {
        this.userArtworks = data;
        this.collectArtistNames();
        this.applySorting();
      },
      error: (err) => console.error('Error fetching user artworks', err),
    });
  }

  collectArtistNames() {
    const setOfArtists = new Set<string>();
    this.userArtworks.forEach(a => setOfArtists.add(a.artist));
    this.artists = Array.from(setOfArtists.values()).sort();
  }

  applySorting() {
    switch (this.sortKey) {
      case 'title':
        this.userArtworks.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case 'artist':
        this.userArtworks.sort((a, b) => a.artist.localeCompare(b.artist));
        break;
      case 'artYear':
        this.userArtworks.sort((a, b) => (a.artYear ?? 0) - (b.artYear ?? 0));
        break;
    }
    if (!this.sortOrderAsc) {
      this.userArtworks.reverse();
    }
    this.filterByArtist();
    this.applySearch();
  }

  toggleOrder() {
    this.sortOrderAsc = !this.sortOrderAsc;
    this.applySorting();
  }

  onSortKeyChange(newKey: string) {
    this.sortKey = newKey;
    this.applySorting();
  }

  filterByArtist() {
    if (this.selectedArtist === 'All') return;
    this.userArtworks = this.userArtworks.filter(a => a.artist === this.selectedArtist);
  }

  onArtistChange() {
    this.fetchUserArt();
  }

  applySearch() {
    if (!this.searchTerm.trim()) return;
    this.userArtworks = this.userArtworks.filter(a =>
      a.title.toLowerCase().includes(this.searchTerm.toLowerCase())
      || a.artist.toLowerCase().includes(this.searchTerm.toLowerCase())
    );
  }

  onSearch() {
    this.fetchUserArt();
  }

  toggleUploadForm(event?: MouseEvent) {
    event?.preventDefault();
    this.showUploadForm = !this.showUploadForm;
  }

  handleFileInput(event: any) {
    if (event.target.files && event.target.files.length > 0) {
      this.fileToUpload = event.target.files[0];
    }
  }

  uploadNewArt() {
    if (!this.fileToUpload || !this.titleInput || !this.artistInput || !this.artYearInput) {
      alert('Please provide file, title, artist, and year.');
      return;
    }

    this.userArtService.uploadArt(
      this.fileToUpload,
      this.titleInput,
      this.artistInput,
      this.artYearInput
    ).subscribe({
      next: (newArt) => {
        alert('User Artwork uploaded!');
        this.showUploadForm = false;
        this.titleInput = '';
        this.artistInput = '';
        this.artYearInput = undefined;
        this.fileToUpload = undefined;
        this.fetchUserArt();
      },
      error: (err) => {
        console.error('Error uploading user art:', err);
        alert('Failed to upload user artwork.');
      }
    });
  }

  // Comment form toggling
  openCommentForm(i: number) {
    this.showCommentFormIndex = (this.showCommentFormIndex === i) ? null : i;
    this.commentUsername = '';
    this.commentText = '';
    this.commentMode = 'GUEST';
    this.commentPassword = '';
  }

  submitComment(i: number) {
    const art = this.userArtworks[i];
    let artId = art.id;

    // send via ArtService
    const formData = new FormData();
    formData.append('artId', String(artId));
    formData.append('text', this.commentText);
    if (this.commentMode === 'USER') {
      // user => send username + password
      formData.append('username', this.commentUsername || 'User');
      formData.append('password', this.commentPassword || '');
    } else {
      // guest => maybe no username
    }

    fetch('http://localhost:5443/api/comments', {
      method: 'POST',
      body: formData
    })
    .then(res => {
      if(!res.ok) throw new Error("Error adding comment");
      return res.text();
    })
    .then(txt => {
      alert("Comment added: " + txt);
      this.showCommentFormIndex = null;
    })
    .catch(err => {
      console.error("Error adding comment:", err);
      alert("Failed to add comment.");
    });
  }


  // =========== DRAW SOMETHING FEATURE =============
  drawingDataURL: string | null = null;
  showDrawPrompt = false;

  openDrawingWindow() {
    this.drawingOpen = true;
    // We'll wait a tick, then init the canvas
    setTimeout(() => {
      if (this.drawingCanvas) {
        this.context = this.drawingCanvas.nativeElement.getContext('2d');
        if (this.context) {
          this.context.fillStyle = "#ffffff";
          this.context.fillRect(0,0,
            this.drawingCanvas.nativeElement.width,
            this.drawingCanvas.nativeElement.height
          );
        }
      }
    }, 100);
  }

  closeDrawingWindow() {
    this.drawingOpen = false;
  }

  setMode(mode: string) {
    this.drawMode = mode; // "pencil" or "eraser"
  }

  onMouseDown(evt: MouseEvent) {
    if (!this.context) return;
    this.isDrawing = true;
    const rect = this.drawingCanvas?.nativeElement.getBoundingClientRect();
    if (!rect) return;
    this.currentX = evt.clientX - rect.left;
    this.currentY = evt.clientY - rect.top;
  }

  onMouseMove(evt: MouseEvent) {
    if (!this.isDrawing || !this.context) return;
    const rect = this.drawingCanvas?.nativeElement.getBoundingClientRect();
    if (!rect) return;
    const newX = evt.clientX - rect.left;
    const newY = evt.clientY - rect.top;

    this.context.lineCap = "round";
    if (this.drawMode === 'eraser') {
      this.context.strokeStyle = '#ffffff';
      this.context.lineWidth = 5;
    } else {
      this.context.strokeStyle = '#000000';
      this.context.lineWidth = 1;
    }

    this.context.beginPath();
    this.context.moveTo(this.currentX, this.currentY);
    this.context.lineTo(newX, newY);
    this.context.stroke();

    this.currentX = newX;
    this.currentY = newY;
  }

  onMouseUp() {
    this.isDrawing = false;
  }
  onMouseLeave() {
    this.isDrawing = false;
  }

  resetDrawing() {
    if(this.context && this.drawingCanvas) {
      this.context.fillStyle = "#ffffff";
      this.context.fillRect(
        0,0,
        this.drawingCanvas.nativeElement.width,
        this.drawingCanvas.nativeElement.height
      );
    }
  }

  saveDrawing() {
    if(!this.context || !this.drawingCanvas) return;
    // get data url
    const dataURL = this.drawingCanvas.nativeElement.toDataURL("image/png");
    // prompt for title, author, date => then store in user gallery
    const t = prompt("Enter Title:");
    if(!t) { alert("Aborted."); return; }
    const a = prompt("Enter Artist:");
    if(!a) { alert("Aborted."); return; }
    const y = prompt("Enter Year (number):");
    if(!y) { alert("Aborted."); return; }

    // We'll store a "file" in memory? We'll do a direct call to userArtService
    // but we actually have a base64 data => can store it as a "file"? We'll do the same approach
    // as normal upload but with a Blob.
    const byteString = atob(dataURL.split(',')[1]);
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for(let i=0; i < byteString.length; i++){
      ia[i] = byteString.charCodeAt(i);
    }
    // Construct a file object
    const blob = new Blob([ia], {type: 'image/png'});
    const file = new File([blob], "canvasDrawing.png", {type: 'image/png'});

    // now let's do the upload
    this.userArtService.uploadArt(file, t, a, parseInt(y,10))
    .subscribe({
      next: (newArt) => {
        alert('User Artwork saved from drawing!');
        this.fetchUserArt();
        this.closeDrawingWindow();
      },
      error: (err) => {
        console.error("Error uploading from drawing:", err);
        alert("Failed to upload from drawing.");
      }
    });
  }
}



file: art.service.spec.ts
contents:
import { TestBed } from '@angular/core/testing';

import { ArtService } from './art.service';

describe('ArtService', () => {
  let service: ArtService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ArtService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



file: art.service.ts
contents:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ArtService {
  private baseUrl = 'http://localhost:5443/api/artworks';
  private commentUrl = 'http://localhost:5443/api/comments';

  constructor(private http: HttpClient) {}

  getArtworks(): Observable<any> {
    return this.http.get(this.baseUrl);
  }

  // Add a quick wrapper so main-carousel can call it
  addComment(artId: number, text: string, username?: string): Observable<any> {
    return this.addCommentWithUserOption(artId, text, username, undefined);
  }

  // For adding a comment to either main or user artwork (with optional password)
  addCommentWithUserOption(
    artId: number,
    text: string,
    username?: string,
    password?: string
  ): Observable<any> {
    const formData = new FormData();
    formData.append('artId', String(artId));
    formData.append('text', text);
    if (username) {
      formData.append('username', username);
    }
    if (password) {
      formData.append('password', password);
    }
    return this.http.post(this.commentUrl, formData);
  }

  // For comment Deletion
  deleteComment(commentId: number, username?: string, password?: string): Observable<any> {
    const formData = new FormData();
    formData.append('commentId', String(commentId));
    if (username) formData.append('username', username);
    if (password) formData.append('password', password);
    return this.http.post(`${this.commentUrl}/delete`, formData);
  }

  editComment(commentId: number, newText: string, username?: string, password?: string): Observable<any> {
    const formData = new FormData();
    formData.append('commentId', String(commentId));
    formData.append('newText', newText);
    if (username) formData.append('username', username);
    if (password) formData.append('password', password);
    return this.http.post(`${this.commentUrl}/edit`, formData);
  }
}



file: user-art.service.ts
contents:
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface UserArt {
  id: number;
  title: string;
  artist: string;
  artYear: number;  // renamed from 'year'
  imageUrl: string;
}

@Injectable({
  providedIn: 'root',
})
export class UserArtService {
  private baseUrl = 'http://localhost:5443/api/user-art';

  constructor(private http: HttpClient) {}

  getAll(): Observable<UserArt[]> {
    return this.http.get<UserArt[]>(this.baseUrl);
  }

  uploadArt(file: File, title: string, artist: string, artYear: number): Observable<UserArt> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('title', title);
    formData.append('artist', artist);
    // rename the param from 'year' to 'artYear'
    formData.append('artYear', String(artYear));

    return this.http.post<UserArt>(`${this.baseUrl}/upload`, formData);
  }

  filterByArtist(artistName: string): Observable<UserArt[]> {
    return this.http.get<UserArt[]>(`${this.baseUrl}/filterByArtist?artistName=${artistName}`);
  }

  searchArt(query: string): Observable<UserArt[]> {
    return this.http.get<UserArt[]>(`${this.baseUrl}/search?query=${query}`);
  }
}



file: index.html
contents:
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Art Gallery Project</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



file: main.ts
contents:
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';
bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err));



file: styles.css
contents:

:root {
  --matrix-green: #18FF0F;
  --ufo-cyan: #00FFFF;
  --dark-bg: #0B0B0B;
  --light-bg: #1C1C1C;
  --panel-bg: #262626;
  --text-color: #CFCFCF;
  --header-bg1: #06AF06;
  --header-bg2: #00CC66;
  --btn-hover-shadow: 0 0 20px rgba(24,255,15,0.6);
  --glow-blue: #00AAFF;
  --danger-red: #FF5757;
  --pitch-black: #000000;
  --neon-green: #4EFF3C;
  --guest-white: #FFFFFF;
  --header-text-shadow: 0 0 5px rgba(0,255,0,0.8);
  --emboss-highlight: rgba(255,255,255,0.1);
  --emboss-shadow: rgba(0,0,0,0.5);
}

html, body {
  margin: 0;
  padding: 0;
  background-color: var(--dark-bg);
  color: var(--text-color);
  font-family: "Courier New", monospace, sans-serif;
}

/* HEADERS / TOP BAR */
.app-header {
  background: linear-gradient(90deg, var(--header-bg1), var(--header-bg2));
  padding: 10px 20px;
  box-shadow: 0 0 15px rgba(0,255,0,0.3);
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 2px solid #000;
}
.app-header h1 {
  margin: 0;
  font-size: 1.7rem;
  font-weight: bold;
  text-shadow: var(--header-text-shadow);
  color: #000;
}
.app-header .ip-info {
  font-size: 0.9rem;
  color: #000;
  background: rgba(255,255,255,0.1);
  padding: 4px 8px;
  border-radius: 4px;
  text-shadow: 0 0 3px rgba(255,255,255,0.8);
}

/* Fancy 3D/Emboss using pseudo elements */
.app-header, .comments-panel, .all-artworks-page, .user-gallery-page, .carousel-page {
  position: relative;
}
.app-header::before,
.comments-panel::before,
.all-artworks-page::before,
.user-gallery-page::before,
.carousel-page::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(145deg, var(--emboss-highlight), var(--emboss-shadow));
  opacity: 0.06;
  mix-blend-mode: overlay;
  pointer-events: none;
}

/* LINKS / BUTTONS / INPUTS */
a {
  color: var(--ufo-cyan);
  text-decoration: none;
}
a:hover { color: var(--matrix-green); }

button {
  background: var(--matrix-green);
  color: #000;
  border: 1px solid #00FF00;
  border-radius: 6px;
  padding: 7px 14px;
  margin: 3px;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
  font-weight: bold;
}
button:hover {
  transform: translateY(-2px);
  box-shadow: var(--btn-hover-shadow);
}
button:active {
  transform: translateY(1px);
  box-shadow: none;
}

input, textarea, select {
  background: var(--light-bg);
  color: var(--text-color);
  border: 1px solid #444;
  border-radius: 4px;
  padding: 5px 8px;
  font-family: inherit;
  margin: 3px 0;
}
input:focus, textarea:focus, select:focus {
  outline: none;
  box-shadow: 0 0 8px var(--ufo-cyan);
}

/* PANELS / LAYOUT */
.comments-panel,
.all-artworks-page,
.user-gallery-page,
.carousel-page {
  background-color: var(--light-bg);
  border: 2px solid #111;
  border-radius: 8px;
  margin: 20px;
  padding: 15px;
  box-shadow: 0 0 15px rgba(0,255,0,0.2);
  animation: fadein 0.7s ease;
}
@keyframes fadein {
  from {opacity:0; transform: scale(0.96);}
  to {opacity:1; transform: scale(1);}
}
.panel-heading {
  font-size: 1.3rem;
  margin-bottom: 12px;
  color: var(--neon-green);
  text-shadow: 0 0 3px var(--neon-green);
  border-bottom: 1px solid #444;
  padding-bottom: 5px;
}

/* RECENT COMMENTS */
.comments-panel {
  /* pitch black background for the container */
  background: var(--pitch-black) !important;
}
.comments-panel h2 {
  color: var(--neon-green);
  margin-top: 0;
  text-shadow: 0 0 4px var(--neon-green);
}
.comments-panel ul {
  list-style: none;
  padding: 0;
  margin: 0;
}
.comments-panel li {
  margin-bottom: 10px;
  background: rgba(0,255,0,0.06);
  padding: 4px 8px;
  border-radius: 4px;
}

/* Guest vs. user name coloring */
.comment-user-guest {
  color: var(--guest-white) !important; /* white for guest */
}
.comment-user-registered {
  color: var(--glow-blue) !important; /* neon blue for user */
}

/* For the "on [Title by Artist]" text => also neon green. */
.comment-art-reference {
  color: var(--matrix-green);
}

/* TILES, GRID, ETC. */
.grid-container, .gallery-container {
  display: grid;
  gap: 15px;
}
.grid-container {
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
}
.art-tile, .grid-item {
  background: #111;
  border: 2px solid #222;
  border-radius: 6px;
  text-align: center;
  padding: 10px;
  box-shadow: 0 0 10px rgba(0,255,0,0.1);
}
.art-tile img, .grid-item img {
  max-width: 100%;
  border: 1px solid #444;
  border-radius: 4px;
}
.art-tile h4, .grid-item h4 {
  color: var(--ufo-cyan);
  margin: 6px 0;
}

/* HEADINGS: use neon green text shadow */
.all-artworks-page h2,
.user-gallery-page h2,
.carousel-page h2 {
  color: var(--neon-green);
  text-shadow: 0 0 4px var(--neon-green);
  margin-top: 0;
}

/* Nav area */
.nav {
  margin-top: 15px;
  display: flex;
  gap: 10px;
}

/* Comment forms */
.comment-form {
  background: #222;
  border: 1px solid #444;
  padding: 10px;
  border-radius: 5px;
  margin: 5px 0;
}
.radio-group {
  display: flex;
  gap: 10px;
  align-items: center;
  margin-bottom: 8px;
}
.radio-group label {
  cursor: pointer;
}



